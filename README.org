#+STARTUP: overview indent
#+Title: EllErre - An LR automata generator

EllErre is designed to be an LR automata generator, with the following algorithms:

+ [X] First Set
+ [X] Follow Set
+ [ ] LR(0) automata
+ [ ] SLR(1)
+ [ ] LR(1)

It is current in development.

For now, it only calculates the First/Follow sets for a given grammar.

* Installation & Compilation

#+begin_src shell :results output
sudo apt-get install git cmake build-essential flex bison;
git clone git://github.com/schnorr/ellerre.git ; mkdir -p ellerre/b ; cd ellerre/b ; cmake .. ; make
#+end_src

* Compilation only

#+begin_src shell :results output :exports both
mkdir -p build ; cd build ; cmake .. ; make
#+end_src

#+RESULTS:
#+begin_example
-- The C compiler identification is GNU 7.3.0
-- The CXX compiler identification is GNU 7.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found FLEX: /usr/bin/flex (found version "2.6.4") 
-- Found BISON: /usr/bin/bison (found version "3.0.4") 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/ellerre/build
[ 11%] [BISON][parser] Building parser with bison 3.0.4
[ 22%] [FLEX][scanner] Building scanner with flex 2.6.4
Scanning dependencies of target ellerre
[ 33%] Building CXX object CMakeFiles/ellerre.dir/src/main.cc.o
[ 44%] Building CXX object CMakeFiles/ellerre.dir/src/symbol.cc.o
[ 55%] Building CXX object CMakeFiles/ellerre.dir/src/rule.cc.o
[ 66%] Building CXX object CMakeFiles/ellerre.dir/src/grammar.cc.o
[ 66%] [BISON][parser] Building parser with bison 3.0.4
[ 77%] Building CXX object CMakeFiles/ellerre.dir/scanner.cc.o
[ 88%] Building CXX object CMakeFiles/ellerre.dir/parser.cc.o
[100%] Linking CXX executable ellerre
[100%] Built target ellerre
#+end_example

* Execution

#+begin_src shell :results output :exports both
cd build
./ellerre < ../examples/g1.ee
#+end_src

#+RESULTS:
#+begin_example
Grammar with 7 rules and 8 symbols (4 non-terminals):
S => S ( A ) S 
S => ε 
A => B C 
A => ε 
B => b 
C => c 
C => ε 

First sets:
S -- ε ( 
A -- ε b 
B -- b 
C -- ε c 

Follow sets:
S -- $ ( 
A -- ) 
B -- ) c 
C -- ) 
#+end_example


     
* Plan                                                             :noexport:

A disciplina de compiladores propõe um estudo das partes de um
compilador, desde o front-end de análise até o parte do back-end de
síntese de código. Essa estrutura se reflete ao longo do semestre,
onde são estudados análise léxica, sintática e semântica; seguido de
geração de código intermediário, de máquina, e múltiplos passes de
otimização. No caso específico do frontend, o professor iniciu a
criação de uma ferramenta pedagógica chamada EllErre, disponível em
https://github.com/schnorr/ellerre. Na sua concepção, espera-se que
essa ferramenta seja um gerador de autômatos LR: LR(0)/SLR(1), LR(1) e
LALR(1). Atualmente, apenas o cálculo dos conjuntos primeiro e
sequência está implementado.

O plano de atuação na Graduação do mestrando Marcelo Cogo Miletto é
completar as funcionalidades projetadas para a ferramenta EllErre, de
uma maneira que ela possa ser utilizada pelos alunos para averiguarem
de maneira autônoma se os exercícios da disciplina estão
corretos. Todas as soluções devem seguir a filosofia UNIX, ou seja,
pequenas ferramentas com propósito único. Especificamente, envolve a
implementação dos seguintes algoritmos:

Análise Léxica
- Algoritmo de Thompson para conversão de ER em AFND
- Algoritmo de Subconjuntos para conversão de AFND em AFD

Análise Sintática, dado uma gramática qualquer
- Criar o autômato LR(0) - com extra SLR(1)
- Criar o autômato LR(1)
- Criar o autômato LALR(1)

A extensão da ferramenta EllErre se dará diretamente sobre o seu
repositório oficial (link acima), mediante commits diretos na branch
de desenvolvimento principal. As respostas para as soluções devem (1)
ser apresentadas de maneira textual de maneira legível por outro
programa de computador; e (2) ser documentadas a ponto de permitir
uso autônomo pelos alunos de graduação.
