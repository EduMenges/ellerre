#+STARTUP: overview indent
#+Title: EllErre - An LR automata generator
#+EXPORT_EXCLUDE_TAGS: noexport

EllErre is designed to be an LR automata generator, with the following algorithms:

+ [X] First Set
+ [X] Follow Set
+ [X] LR(0) automata / SLR(1) automata
+ [X] LR(1) automata
+ [X] LALR(1) automata
+ [X] GraphViz automata representation
+ [X] Mark initial and end states in the automata
+ [X] Step by Step GraphViz automata representation for LR0/LR1
+ [ ] Step by Step GraphViz automata representation for LALR1
+ [ ] Detect shift/reduce and reduce/reduce conflicts
+ [ ] LR Analysis for a given input

It is current in development.

For now, it calculates the First/Follow sets, the LR(0), LR(1) and
LALR(1) automatas for a given grammar.

* Installation & Compilation

#+begin_src shell :results output
sudo apt-get install git cmake build-essential flex bison libfl-dev;
git clone git://github.com/schnorr/ellerre.git ; mkdir -p ellerre/b ; cd ellerre/b ; cmake .. ; make
#+end_src

- If you want to visualize the automatas with graphviz
#+begin_src shell :results output
sudo apt-get install graphviz
#+end_src

* Compilation only

#+begin_src shell :results output :exports both
mkdir -p build ; cd build ; cmake .. ; make
#+end_src

#+RESULTS:
#+begin_example
-- The C compiler identification is GNU 7.3.0
-- The CXX compiler identification is GNU 7.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found FLEX: /usr/bin/flex (found version "2.6.4") 
-- Found BISON: /usr/bin/bison (found version "3.0.4") 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/ellerre/build
[ 11%] [BISON][parser] Building parser with bison 3.0.4
[ 22%] [FLEX][scanner] Building scanner with flex 2.6.4
Scanning dependencies of target ellerre
[ 33%] Building CXX object CMakeFiles/ellerre.dir/src/main.cc.o
[ 44%] Building CXX object CMakeFiles/ellerre.dir/src/symbol.cc.o
[ 55%] Building CXX object CMakeFiles/ellerre.dir/src/rule.cc.o
[ 66%] Building CXX object CMakeFiles/ellerre.dir/src/grammar.cc.o
[ 66%] [BISON][parser] Building parser with bison 3.0.4
[ 77%] Building CXX object CMakeFiles/ellerre.dir/scanner.cc.o
[ 88%] Building CXX object CMakeFiles/ellerre.dir/parser.cc.o
[100%] Linking CXX executable ellerre
[100%] Built target ellerre
#+end_example

* Execution
** First and Follow
#+begin_src shell :results output :exports both
cd build
./firstfollow < ../examples/ex1.ee
#+end_src

#+RESULTS:
#+begin_example
Grammar with 3 rules and 4 symbols (2 non-terminals):
S => A A 
A => a A 
A => b 

First sets:
S -- b a 
A -- b a 

Follow sets:
S -- $ 
A -- $ b a 
#+end_example

** LR(0) automata
#+begin_src shell :results output :exports both
cd build
./lr0 < ../examples/ex1.ee
#+end_src

#+RESULTS:
#+begin_example
Grammar with 4 rules and 4 symbols (2 non-terminals):
S' ⇒ S 
S ⇒ A A 
A ⇒ a A 
A ⇒ b 

LR0 item set:
S' ⇒ • S 
S' ⇒ S • 
S ⇒ • A A 
S ⇒ A • A 
S ⇒ A A • 
A ⇒ • a A 
A ⇒ a • A 
A ⇒ a A • 
A ⇒ • b 
A ⇒ b • 

LR0 automata:
State 0:
S' ⇒ • S 
---------------
S ⇒ • A A 
A ⇒ • a A 
A ⇒ • b 
Transitions: 
S ---> 1
A ---> 2
b ---> 3
a ---> 4

State 1:
S' ⇒ S • 
---------------

State 2:
S ⇒ A • A 
---------------
A ⇒ • a A 
A ⇒ • b 
Transitions: 
A ---> 5
b ---> 3
a ---> 4

State 3:
A ⇒ b • 
---------------

State 4:
A ⇒ a • A 
---------------
A ⇒ • a A 
A ⇒ • b 
Transitions: 
A ---> 6
b ---> 3
a ---> 4

State 5:
S ⇒ A A • 
---------------

State 6:
A ⇒ a A • 
---------------

#+end_example
     
** LR(1) automata
#+begin_src shell :results output :exports both
cd build
./lr1  < ../examples/ex1.ee
#+end_src

#+RESULTS:
#+begin_example
Grammar with 4 rules and 4 symbols (2 non-terminals):
S' => S 
S => A A 
A => a A 
A => b 

First set: 
S -- b a 
A -- b a 
S' -- b a 

Follow set: 
S -- $ 
A -- $ b a 
S' -- $ 

LR1 item set:
S' => • S , $
S' => S • , $
S => • A A , $
S => A • A , $
S => A A • , $
A => • a A , $
A => • a A , b
A => • a A , a
A => a • A , $
A => a • A , b
A => a • A , a
A => a A • , $
A => a A • , b
A => a A • , a
A => • b , $
A => • b , b
A => • b , a
A => b • , $
A => b • , b
A => b • , a

LR1 automata:
State 0:
S' => • S , $
---------------
S => • A A , $
A => • a A , b
A => • a A , a
A => • b , b
A => • b , a
Transitions: 
S ---> 1
A ---> 2
b ---> 3
a ---> 4

State 1:
S' => S • , $
---------------

State 2:
S => A • A , $
---------------
A => • a A , $
A => • b , $
Transitions: 
A ---> 5
b ---> 6
a ---> 7

State 3:
A => b • , b
A => b • , a
---------------

State 4:
A => a • A , b
A => a • A , a
---------------
A => • a A , b
A => • a A , a
A => • b , b
A => • b , a
Transitions: 
A ---> 8
b ---> 3
a ---> 4

State 5:
S => A A • , $
---------------

State 6:
A => b • , $
---------------

State 7:
A => a • A , $
---------------
A => • a A , $
A => • b , $
Transitions: 
A ---> 9
b ---> 6
a ---> 7

State 8:
A => a A • , b
A => a A • , a
---------------

State 9:
A => a A • , $
---------------

#+end_example

** LALR(1) automata
#+begin_src shell :results output :exports both
cd build
./lalr1  < ../examples/ex1.ee
#+end_src

#+RESULTS:
#+begin_example
Grammar with 4 rules and 4 symbols (2 non-terminals):
S' => S 
S => A A 
A => a A 
A => b 

First set: 
S -- b a 
A -- b a 
S' -- b a 

Follow set: 
S -- $ 
A -- $ b a 
S' -- $ 

LALR1 item set:
S' => • S , $
S' => S • , $
S => • A A , $
S => A • A , $
S => A A • , $
A => • a A , $
A => • a A , b
A => • a A , a
A => a • A , $
A => a • A , b
A => a • A , a
A => a A • , $
A => a A • , b
A => a A • , a
A => • b , $
A => • b , b
A => • b , a
A => b • , $
A => b • , b
A => b • , a

LALR1 automata:
State 0:
S' => • S , $
---------------
S => • A A , $
A => • a A , b
A => • a A , a
A => • b , b
A => • b , a
Transitions: 
S ---> 1
A ---> 2
b ---> 3
a ---> 4

State 1:
S' => S • , $
---------------

State 2:
S => A • A , $
---------------
A => • a A , $
A => • b , $
Transitions: 
A ---> 5
b ---> 3
a ---> 4

State 3:
A => b • , $
A => b • , b
A => b • , a
---------------

State 4:
A => a • A , $
A => a • A , b
A => a • A , a
---------------
A => • a A , $
A => • a A , b
A => • a A , a
A => • b , $
A => • b , b
A => • b , a
Transitions: 
A ---> 6
b ---> 3
a ---> 4

State 5:
S => A A • , $
---------------

State 6:
A => a A • , $
A => a A • , b
A => a A • , a
---------------

#+end_example

* Generating the visual representation of the automata
Each parser execution from EllErre generate a *.dot* file after its
execution. The dot files are named after its parsing algorithm
(LR0.dot, LR1.dot, and LALR1.dot).

This files can be used by tools like *graphviz* to generate a visual
representation of the given LR automata.  

** Example

*** Running the example
The following execution generates the "LR0.dot" file, which describes
the automata in the using the .dot syntax.
#+begin_src shell :results output :exports both
cd build
./lr0 < ../examples/ex1.ee >> /dev/null
cat LR0.dot
#+end_src

#+RESULTS:
#+begin_example
digraph g { graph [fontsize=30 labelloc="t" label="" splines=true overlap=false rankdir = "LR"]; ratio = auto;
	"state0" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #0</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">S' ⇒ • S 
</font></td></tr>
		<tr><td align="left" port="r1"><font color="gray25" face="bold">S ⇒ • A A 
</font></td></tr>
		<tr><td align="left" port="r2"><font color="gray25" face="bold">A ⇒ • a A 
</font></td></tr>
		<tr><td align="left" port="r3"><font color="gray25" face="bold">A ⇒ • b 
</font></td></tr>
	</table>>];

	"state1" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #1</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">S' ⇒ S • 
</font></td></tr>
	</table>>];

	"state2" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #2</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">S ⇒ A • A 
</font></td></tr>
		<tr><td align="left" port="r1"><font color="gray25" face="bold">A ⇒ • a A 
</font></td></tr>
		<tr><td align="left" port="r2"><font color="gray25" face="bold">A ⇒ • b 
</font></td></tr>
	</table>>];

	"state3" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #3</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">A ⇒ b • 
</font></td></tr>
	</table>>];

	"state4" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #4</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">A ⇒ a • A 
</font></td></tr>
		<tr><td align="left" port="r1"><font color="gray25" face="bold">A ⇒ • a A 
</font></td></tr>
		<tr><td align="left" port="r2"><font color="gray25" face="bold">A ⇒ • b 
</font></td></tr>
	</table>>];

	"state5" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #5</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">S ⇒ A A • 
</font></td></tr>
	</table>>];

	"state6" [ style = "filled" penwidth = 1 fillcolor = "white" fontname = "Courier New" shape = "Mrecord" label = <<table border="0" cellborder="0" cellpadding="3" bgcolor="white">
		<tr><td bgcolor="black" align="center" colspan="2"><font color="white">State #6</font></td></tr>
		<tr><td align="left" port="r0"><font face="bold">A ⇒ a A • 
</font></td></tr>
	</table>>];

state0 -> state1[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "S" ];
state0 -> state2[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "A" ];
state0 -> state3[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "b" ];
state0 -> state4[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "a" ];
state2 -> state5[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "A" ];
state2 -> state3[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "b" ];
state2 -> state4[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "a" ];
state4 -> state6[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "A" ];
state4 -> state3[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "b" ];
state4 -> state4[ penwidth = 3 fontsize = 22 fontcolor = "black" label = "a" ];
}
#+end_example

*** Generating the image
#+begin_src shell :results output :exports both
cd build
dot -Tpng LR0.dot -o LR0_output.png
#+end_src

#+RESULTS:

[[./examples/LR0_output.png]]
* Plano                                                            :noexport:

A disciplina de compiladores propõe um estudo das partes de um
compilador, desde o front-end de análise até o parte do back-end de
síntese de código. Essa estrutura se reflete ao longo do semestre,
onde são estudados análise léxica, sintática e semântica; seguido de
geração de código intermediário, de máquina, e múltiplos passes de
otimização. No caso específico do frontend, o professor iniciu a
criação de uma ferramenta pedagógica chamada EllErre, disponível em
https://github.com/schnorr/ellerre. Na sua concepção, espera-se que
essa ferramenta seja um gerador de autômatos LR: LR(0)/SLR(1), LR(1) e
LALR(1). Atualmente, apenas o cálculo dos conjuntos primeiro e
sequência está implementado.

O plano de atuação na Graduação do mestrando Marcelo Cogo Miletto é
completar as funcionalidades projetadas para a ferramenta EllErre, de
uma maneira que ela possa ser utilizada pelos alunos para averiguarem
de maneira autônoma se os exercícios da disciplina estão
corretos. Todas as soluções devem seguir a filosofia UNIX, ou seja,
pequenas ferramentas com propósito único. Especificamente, envolve a
implementação dos seguintes algoritmos:

Análise Léxica
- Algoritmo de Thompson para conversão de ER em AFND
- Algoritmo de Subconjuntos para conversão de AFND em AFD

Análise Sintática, dado uma gramática qualquer
- Criar o autômato LR(0) - com extra SLR(1)
- Criar o autômato LR(1)
- Criar o autômato LALR(1)

A extensão da ferramenta EllErre se dará diretamente sobre o seu
repositório oficial (link acima), mediante commits diretos na branch
de desenvolvimento principal. As respostas para as soluções devem (1)
ser apresentadas de maneira textual de maneira legível por outro
programa de computador; e (2) ser documentadas a ponto de permitir
uso autônomo pelos alunos de graduação.

* Relatório                                                        :noexport:

Durante o período de atuação na graduação, que envolveu a disciplina
de Atividade Didática I - CMP410 realizada com o professor Lucas Mello
Schnor na disciplina de Compiladores - INF01147 no semestre 2019/2. A
proposta envolvia a continuação do desenvolvimento de uma ferramenta
pedagócica chamada EllErre, de forma a completar as funcionalidades
projetadas, ela encontra-se disponível em
https://github.com/schnorr/ellerre. O desenvolvimento incluiu a  
geração dos autômatos LR(0), LR(1) e LALR(1), que podem ser gerados
automaticamente dada uma gramática passada como entrada. Desta forma
os alunos podem averiguar de maneira autônoma se os exercícios de
análise sintática da disciplina estão corretos, bem como propor novos
exercícios (com gramáticas alternativas) e verificar sua solução
(confirmando se a classe das gramáticas fornecidas).

* Plano - Ana                                                      :noexport:
A disciplina de Compiladores (INF01147) apresenta a funcionalidade de
  um compilador em nível teórico e prático. São apresentadas análise
  léxica, sintática e semântica da linguagem, a geração de código
  intermediário, geração de código de máquina e múltiplos passes de
  otimização. Como atividade proposta, os alunos devem projetar e
  implementar um compilador para uma linguagem de programação
  simples. Para isso, a compreensão e práticas sobre a criação de
  autômatos é essencial.

  A ferramenta EllErre foi desenvolvida pelo professor Lucas Mello
  Schnorr e Marcelo Cogo Miletto para a geração de autômatos de forma
  automatizada. EllErre foi criada para fins pedagógicos a ser utilizada
  por alunos de disciplinas de Compiladores, para que possam avaliar
  práticas da disciplina de forma autônoma e automática, ao invés de
  verificações manuais de suas soluções. Atualmente, a ferramenta
  suporta a geração de autômatos LR: LR(0)/SLR(1), LR(1) e LALR(1), o
  cálculo dos conjuntos primeiro e sequência, e representação visual do
  autômato usando GraphViz. O repositório oficial da ferramenta está no
  GitHub em: https://github.com/schnorr/ellerre/.

  O plano de atuação na Graduação da mestranda Ana Luisa Veroneze
  Solórzano é implementar novas funcionalidades para a ferramenta
  EllErre. Dentre as atividades a serem realizadas estão:
  - A geração passo-a-passo da representação do autômato utilizando a
    ferramenta de visualização GraphViz, contendo explicações textuais
    em cada etapa
  - A marcação dos estados iniciais e finais do autômato
  - A detecção de conflitos empilha/reduz e reduz/reduz
  - Análise LR de uma entrada utilizando um autômato gerado
  - Geração de uma interface web para avaliação de um autômato gerado
    sem a necessidade de instalar a ferramenta localmente

  A extensão da ferramenta EllErre se dará diretamente sobre o seu
  repositório oficial (link acima), mediante commits diretos na branch
  de desenvolvimento principal. As respostas para as soluções devem (1)
  ser apresentadas de maneira textual de maneira legível por outro
  programa de computador; e (2) ser documentadas a ponto de permitir uso
  autônomo pelos alunos de graduação.
* Relatório - Ana                                                  :noexport:

Relatório da disciplina de Atividade Didática I (CMP410) realizada em
2020/2 na disciplina da graduação de Compiladores (INF01147),
ministrada pelo professor Lucas Mello Schnor. A proposta consistiu na
continuação do desenvolvimento da ferramenta EllErre
(https://github.com/schnorr/ellerre) anteriorment desenvolvida pelo
professor Lucas Mello Schnorr e Marcelo Cogo Miletto para a geração de
autômatos de forma automatizada. A ferramenta tem fins pedagógicos
para auxiliar a correção de exercícios de anaálise sintática da
disciplina de Compiladores.

Dentre as atividades que consistiam o plano de atuação, foram
realizados:
- A marcação dos estados iniciais e finais do autômato
- Geração de uma interface web para avaliação de um autômato gerado
  sem a necessidade de instalar a ferramenta localmente, disponível
  em: https://ellerre.herokuapp.com/. A aplicação foi criada
  utilizando o pacote Shiny para a linguagem de programação R e está
  hospedada na plataforma em nuvem Heroku (https://www.heroku.com/).
  O usuário pode submeter um arquivo contendo a definição da
  gramática, como no programa executado pela linha de comando, ou
  inserir textualmente na caixa de texto a sua gramática. O usuário
  também pode acessar as visualizações dos autômatos e fazer download
  das imagens e/ou dos arquivos contendo a gramática .
- A visualização passo-a-passo da representação do autômato LR0 e LR1
  utilizando as imagens dos autômatos geradas com a ferramenta de
  visualização GraphViz. A script foi implementado usando a linguagem
  Python
- Aplicação de um formulário de feedback sobre o uso do EllErre
  localmente e na sua versão web. O formulário foi anônimo e enviado
  para a turma responder voluntariamente. Apenas uma pessoa respondeu,
  por isso não foi possível realizar uma avaliação representativa para
  a turma. O formulário está acessível em:
  https://forms.gle/a6vLFzN6VPaE5nTL8
- Início de escrita de artigo sobre o uso da ferramenta EllErre como
  apoio à disciplina de Compiladores.


Instruções sobre o uso da ferramenta web, instalação de bibliotecas
extras, bem como da aplicação para visualização da criação dos
autômatos LR0 e LR1 passo-a-passo estão detalhadas no arquivo
README.org do repositório oficial da ferramenta:
https://github.com/schnorr/ellerre. Assim, os estudantes podem usar a
ferramenta sem depender de outros materiais de consulta.
* EllErre web app

Alternatively, you can use: [[https://ellerre.herokuapp.com/][https://ellerre.herokuapp.com/]]

There, you can input a .dot file that defines a grammar or textually
input your grammar, separating each line by a ";" . You can also
download the visualizations generated.

The application was created using the Shiny package for R, and the
source code is available in: [[./ellerre-web]]

* EllErre step-by-step visualization for LR0 and LR1

The LR0 and LR1 execution generate a file "LR0-step.dot" or
"LR1-step.dot", which is used by the Python script for the
step-by-step visualization. It was created with Python 3.7.5.

Install the Python libraries needed (suggestion to use a conda
environment):
#+begin_src shell :results output :exports both
conda create --name ellerre-env python=3.7.3
conda activate ellerre-env

sudo apt-get install graphviz graphviz-dev
pip install pygraphviz
pip install tk
pip install Pillow
#+end_src

To launch the Python script, you can input the step .dot file or load
it using the GUI menu. You can also save the generated images step by
step using the menu -> File option.

#+begin_src shell :results output :exports both
python run-steps.py build/LR0-steps.dot
#+end_src

The program renders the step files using the .dot type, with positions
set automatically. You can use fixed nodes position by passing the =fdp=
argument to the execution, as follows.

#+begin_src shell :results output :exports both
python run-steps.py build/LR0-steps.dot fdp
#+end_src

* Citation
If you use the EllErre information, please cite as:

#+begin_example
@software{ellerre,
title = {EllErre: an LR automata generator},
author = {Schnorr, L. M. and Miletto, M. C. and Solórzano A. L. V.},
year = 2020,
url = {https://github.com/schnorr/ellerre}
}
#+end_example

[Software] L. M. Schnorr, M. C. Miletto, and A. L. V. Solórzano,
EllErre: an LR automata generator, 2020. URL:
https://github.com/schnorr/ellerre
